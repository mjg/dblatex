#!/usr/bin/perl
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
        if $running_under_some_shell;

use Getopt::Std;


@curlevel = ();
@sections = ("chapter", "sect1", "sect2", "sect3", "sect4", "sect5");


sub print_head_mml
{
  local($excluded_file) = $_[0];
  local($hide_intro) = $_[1];
  print "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n";
  print "<!DOCTYPE book PUBLIC \"-//OASIS//DTD DocBook MathML Module V1.0//EN\"\n";
  print "         \"dbmathml.dtd\">\n";
  print "<book xmlns:mml=\"http://www.w3.org/1998/Math/MathML\">\n";
  print "<title>W3C MathML Test Suite Extracts</title>\n";

  if ($hide_intro == 0) {
    print "<chapter>\n";
    print "<title>Introduction</title>\n";
    print "<para>This file is automatically generated from the MathML Testsuite
    tree, and contains a large excerpt of the tree.</para>\n";
    if ($excluded_file) {
      print "<para>The tests whose path or name contain the following words are not
      included in this file:</para>
      <itemizedlist>\n";
      open(EXC, "<$excluded_file");
      while (<EXC>) {
        chomp;
        $line = $_;
        print "<listitem><para>$line</para></listitem>\n";
      }
      close(EXC);
      print "</itemizedlist>\n";
    }
    print "</chapter>\n";
  }
}

sub print_end
{
  print "</book>\n";
}

sub parse
{
  my $line = $_[0];

#  $line =~ s/\&thicksp;/<!-- & -->/g;
#  $line =~ s/\&medsp;/<!-- & -->/g;
#  $line =~ s/\&infty;/<!-- & -->/g;

  $line =~ s|<math|<mml:math xmlns="http://www.w3.org/1998/Math/MathML"|g;
  $line =~ s|</math>|</mml:math>|g;

  # get back to entity: &amp;#x -> &#x
  $line =~ s/\&amp;#x/\&#x/g;

  # pixels not supported, changed to points.
  $line =~ s/px/pt/g;

  return $line;
}

getopts("e:E:sil");

print_head_mml($opt_e, $opt_s);

while (@ARGV) {

  $file = $ARGV[0];

  ($arbo = $file) =~ s/.*testsuite\/(.*)/$1/g;
  ($img = $file) =~ s/\.mml/\.png/;

  @dirs = split('/', $arbo);

  for ($i = 0; $i <= $#dirs; $i++) {
    if ($dirs[$i] eq '' || $dirs[$i] eq '.') { next; }
    if ($i <= $#curlevel) {
      if ($dirs[$i] ne $curlevel[$i]) {
        # On ferme jusqu'au niveau
        for ($j = $#curlevel; $j >= $i; $j--) {
          print "</$sections[$j]>\n";
          $#curlevel--;
        }
        print "<$sections[$i]><title>$dirs[$i]</title>\n";
      }
    } else {
      print "<$sections[$i]><title>$dirs[$i]</title>\n";
    } 
  }
  @curlevel = ();
  @curlevel = @dirs;

  $mml = "";

#  print "<para>\n";
  open(MML, "<$file");
  while (<MML>) {
    ($line = $_) =~ s///;
    $mml = $mml . $line;
  }
  close(MML);
  $mml = parse($mml);
  if ($opt_l) {
    print "<programlisting>\n";
    print "<![CDATA[$mml]]>\n";
    print "</programlisting>\n";
  }
  if ($opt_i) {
    print "<para>It must look like:</para>\n";
    print "<mediaobject>\n";
    print "<imageobject><imagedata fileref=\"$img\"/></imageobject>\n";
    print "</mediaobject>\n";
  }
  print "<para>It is rendered as:</para>\n";
  print "<equation>\n" if ($opt_E);
  print $mml;
  print "</equation>\n" if ($opt_E);
#  print "</para>\n";

  shift;
}
      
# Close the open sections
for ($i = $#curlevel; $i >=0; $i--) {
  print "</$sections[$i]>\n";
}
print_end;
